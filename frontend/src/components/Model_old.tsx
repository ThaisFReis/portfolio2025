/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/avatar.glb --transform --types 
Files: public/avatar.glb [50.31MB] > /home/thaisfreis/Documentos/Workspace/poc-portfolio/frontend/avatar-transformed.glb [4.59MB] (91%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import type { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ['tripo_node_27d75684-9225-4aa5-ab5e-47d34820c9a4']: THREE.SkinnedMesh
    pescoço: THREE.Bone
    neutral_bone: THREE.Bone
  }
  materials: {
    Materiais: THREE.MeshStandardMaterial
  }
  animations: THREE.AnimationClip[]
}

export function Model(props: React.ComponentProps<'group'>) {
  const { scene } = useGLTF('/avatar.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  return (
    <group {...props} dispose={null} rotation-y={-Math.PI / 4}>
      <primitive object={nodes.pescoço} />
      <primitive object={nodes.neutral_bone} />
      <skinnedMesh geometry={nodes['tripo_node_27d75684-9225-4aa5-ab5e-47d34820c9a4'].geometry} material={materials.Materiais} skeleton={nodes['tripo_node_27d75684-9225-4aa5-ab5e-47d34820c9a4'].skeleton} />
    </group>
  )
}

useGLTF.preload('/avatar.glb')
